-- day02

/*
    계정이름 : scott
    비밀번호 : tiger
    
-----------------------------
    hr
    계정이름 : hr
    비밀번호 : hr

-----------------------------
    관리자계정
    계정이름 : system
    비밀번호 : jennie    
*/

/*
    오라클 구성
        1. DBMS
            ==> 명령을 받아서 실행하는 프로그램의 일종
                데이터베이스 관리 시스템
        2. Data Bank
            ==> 데이터를 보관하는 장소를 관리하는 도구
                
    참고 ]
        데이터베이스의 성능은 DBMS에 따라서 달라진다.
        데이터베이스를 조작하는 명령은 DBMS에 따라서 달라진다.

=================================================================
    
    CRUD
    ==> 데이터베이스를 공부하는데 반드시 알아야 할 4가지 명령
        데이터를 조작하는 네가지 방법
        
        C - CREATE      추가  INSERT
        R - READ        조회  SELECT
        U - UPDATE      수정  UPDATE
        D - DELETE      삭제  DELETE
        
----------------------------------------------------------------
    
    오라클이 데이터를 보관하능방법
    ==> 테이블(ENTITY, 개체) 단위로 데이터를 보관한다.
    
        테이블이란 마치 엑셀처럼 
        줄과 칸으로 구성되어 데이터를 보관하는 것
        
        테이블이란 컬럼(필드)와 레코드(행, ROW)로 구성된 데이터를 보관하는
        기본 단위
        
        필드   : 속성, attribute, column, field
                 같은 의미와 단위, 형태의 데이터 모임
               
        레코드 : 같은 목적을 가진 데이터 모임(행)
                 레코드 한개가 데이터 한개라고 생각하는 것이 좋다.
*/

/*
    오라클은 사용자 계정 내부에 테이블이 만들어진다.
    이 때 사용자 계정 내부에 존재하는 모든 테이블을 조회하는 방법
        
        SELECT tname From tab;
*/
SELECT tname From tab;
-- tab : 계정 내부에 생성된 테이블의 정보를 가지고 있는 시스템이 관리하는 테이블

-- TAB 테이블의 모든 데이터 조회
SELECT tab.* FROM tab;

SELECT
    *
FROM
    tab
;

/*
    데이터베이스에서는 
    명령어의 대소문자는 구분하지 않는다.

--------------------------------------------------------------------------------
    특정 테이블의 간략한 구조를 확인하는 방법
    형식 ]
    
        DESC 테이블이름;
        DESCRIBE 테이블이름;
*/

DESC emp;
DESCRIBE emp;

/*
    SELECT 질의명령
    ==> 테이블이 가지고 있는 데이터(내용, 레코드)를 확인하는 명령
    
        형식 ]
            SELECT
                [DISTINCT] 컬럼이름
            FROM
                테이블이름
            [
                옵션
            ];
*/

-- 사원들의 직급을 조회하세요.
SELECT
    job
FROM
    emp
;

-- 사원들의 직급을 조회하세요. 단 중복되는 직급은 한번만 조회되게 하세요.
SELECT
    DISTINCT job
FROM
    emp
;
/*
    DISTINCT 
        중복되는 데이터를 한번만 출력해주는 명령
*/

-- 사원들의 직급과 부서번호를 조회하세요. 단 중복되는 데이터는 한번만 조회되게 하세요.
SELECT
    DISTINCT job, deptno
FROM
    emp
ORDER BY -- 정렬기준을 정하는 절 : 조회 결과를 정렬해서 조회하고 싶을 때 사용하는 절
    deptno ASC -- ASC : 오름차순 정렬, DESC : 내림차순 정렬
;

-- 위 결과를 조회하는데 부서번호가 낮은 것부터 조회하고 부서번호가 같으면 직급을 내림차순으로 정렬하세요
SELECT
    DISTINCT job, deptno
FROM
    emp
ORDER BY
    deptno ASC, job DESC
;

/*
    참고 ]
        원칙적으로 조회할 때는
        조회할 컬럼이름을 하나씩 나역해서 조회하는 것이 원칙이다.
        
        * 를 사용하게 되면 모든 컬럼을 조회하게 되긴하다.
        이 방법은 실무에서는 절대 사용하지 않는 방법이다.
     
--------------------------------------------------------------------------------

    참고 ] 
        질의명령 내에는 연산식을 포함할 수 있다.
        연산식이 포함되면 연산한 결과를 조회하게 된다.
*/

-- 사원들의 이름과 급여를 조회하세요. 
-- 급여는 현재 급여에서 10% 인상된 급여로 조회되게 하세요.
-- 급여가 높은 사원순으로 정렬되서 조회되게 하세요.
SELECT
    ename, sal, sal * 1.1
FROM
    emp
ORDER BY
    sal DESC
;

/*
    조회되는 컬럼의 이름을 다르게 조회할 수 있다.
    별칭을 줘서 조회할 수 있다.
    
    형식 ]
        SELECT
            컬럼이름1 AS "별칭이름1", 컬림이름2 AS "별칭이름2"
        FROM
            테이블이름
        ;
        
        참고 ]
            별칭에 공백이 들어가는 경우는 반드시 "" 로 감싸줘야 한다.
            AS 는 생략할 수 있다.
            별칭에 공백이 없으면 "" 를 생략해도 된다.
            
            예 ]
                SELECT ename AS "사원이름" FROM emp;
                SELECT ename "사원이름" FROM emp;
                SELECT ename 사원이름 FROM emp;
                
*/
SELECT 
    ename AS "사원이름", 
    ename "사원이름", 
    ename 사원이름, 
    ename AS 사원이름, 
    ename " 사 원 이 름" 
FROM 
    emp;

/*
    NULL 데이터 
    ==> 컬럼에는 데이터가 기록되어야 하는데
        가끔은 기록할 데이터가 준비되어야 하는 경우도 있다.
        이럴 때는 그 컬럼의 데이터는 비워서 한 행을 입력할 것이다.
        이처럼 컬럼의 데이터가 없는 상태를 NULL 데이터라고 한다.
        
    ***
    NULL 데이터는 모든 연산에서 제외가 된다.
*/

-- 사원들의 사원이름, 현재 커미션, 100을 더한 증가된 커미션 을 조회하세요.
SELECT
    ename, comm "현재 커미션", comm + 100 "증가된 커미션"
FROM
    emp
;

/*
    NULL 데이터 처리함수
    
        NVL(컬럼이름, 데이터)
        ==> 컬럼 내용이 NULL 인 경우 "데이터" 로 대체해서 조회
            ***
*/
-- 사원들의 사원이름, 커미션을 조회하세요.
SELECT
    ename 사원이름, NVL(comm || '', '커미션 없음') 커미션
FROM
    emp
;

-- 사원들의 사원이름, 현재 커미션, 100을 더한 증가된 커미션을 조회하세요.
-- 단, 커미션이 없는 사원은 증가된 커미션을 계산할 때 50으로 조회되게 하세요.
SELECT
    ename 사원이름, comm "현재 커미션", NVL(comm + 100, 50) "증가된 커미션"
FROM
    emp
;

/*
    문자열 결합
        오라클에서도 문자열 결합을 사용할 수 있다.
        두개의 컬럼을 결합할 수 있고
        하나의 컬럼과 다른 문자를 결합할 수도 있다.
*/

-- 사원들의 사원번호와 사원이름을 조회하세요.
-- 조회 형태는 사원번호 - 사원이름의 형태로 조회되게 하세요.
SELECT
    empno ||' - '|| ename 사원
FROM
    emp
;

/*
    테이블에서 조회할 때
    연산식의 결과만 조회하는 경우
    조회되는 행의 수는 데이터의 갯수만큼 조회된다.
*/

SELECT
    23425/7
FROM
    emp
;
-- 사원들의 사원번호, 사원이름 을 조회하세요
-- 사원이름은 사원이름 앞에 Mr.가 붙여져서 조회되게 하세요.
SELECT
    empno 사원번호, 'Mr.' || ename 사원이름
FROM
    emp
;

--------------------------------------------------------------------------------
/*
    조건에 맞는 데이터만 조회하기
        형식 ]
            SELECT
                컬럼이름들...
            FROM
                테이블이름
            WHERE
                조건식
            ORDER BY
                정렬기준 컬럼 [ASC] || DESC, 컬럼이름 [ASC] || DESC,...
            ;
            
            ==> WHERE 절의 조건식의 결과는 반드시 TRUE 또는 FALSE 중 하나여야 한다.
            
                조건식에는 자바에서와 마찬가지로 비교연산자, 논리연산자를 이용한다
                
                    비교연산자
                        >   : 크다.
                        <   : 작다.
                        >=  : 크거나 같다.
                        <=  : 작거나 같다.
                        =   : 같다.
                        !=  : 다르다.
                        <>  : 다르다.
                    논리연산자
                        AND
                        OR
                        
    참고 ]
        오라클은 데이터의 형태를 매우 중요시한다.
        원칙적으로 문자는 문자끼리만 비교할 수 있다.
        숫자도 숫자끼리만 비교할 수 있다.
        단, 예외가 있는데 날짜는 문자와 비교할 수 있다.
        
    참고 ]
        문자 데이터도 크기 비교가 가능하다.
        ASCII 코드값을 이용해서 비교하게 되기 때문이다.
        즉, 
            'A' < 'B'
            'AA' < 'AB'
            
        주의 ]
            오라클은 명령은 대소문자를 구분하지 않지만
            문자데이터는 반드시 대소문자를 구분해야 한다.
        
*/

SELECT
    empno 사원번호, ename 사원이름, sal 급여
FROM
     emp
WHERE
    1 <> 1 -- 항상 false 이다.==> 조회결과에 포함되는 행이 없다.
;

-- 'SMITH' 사원의 사원번호, 사원이름, 직급, 부서번호를 조회하세요.
SELECT
    empno 사원번호, ename 사원이름, job 직급, deptno 부서번호
FROM
    emp
WHERE
    ename = 'SMITH'
;

-- 직급이 'MANAGER' 인 사원들의 사원이름, 직급, 부서번호를 조회하세요.
SELECT
    ename 사원이름, job 직급, deptno 부서번호
FROM
    emp
WHERE
    job = 'MANAGER'
;

-- 급여가 1500 이상인 사원들의
-- 사원 이름, 직급, 급여를 조회하세요

SELECT
    ename 사원이름, job 직급, sal 급여
FROM
    emp
WHERE
    sal >= 1500
;

-- 문자도 비교 가능하다.
-- 사원이름이 'M' 이후 문자로 시작하는 사원들의 
-- 사원이름, 직급을 조회하세요

SELECT
    ename 사원이름, job 직급
FROM
    emp
WHERE
--    ename > 'N'
    ename > 'MZZZZ'
;

-- 입사일이 '81/11/17' 이후인 사원들의 
-- 사원번호, 사원이름, 입사일을 조회하세요

SELECT
    empno 사원번호, ename 사원이름, hiredate 입사일
FROM
    emp
WHERE
    hiredate >= '81/11/17'
;

-- 직급이 'MANAGER' 이고 급여가 2500 이상인 사원들의
-- 사원번호, 사원이름, 직급, 급여를 조회하세요

SELECT
    empno 사원번호, ename 사원이름, job 직급, sal 급여
FROM
    emp
WHERE
    job = 'MANAGER' and sal >= 2500
;

-- 사원들중 급여가 1000 ~ 3000 사이인 사원들의
-- 사원이름, 직급, 급여를 조회하세요

SELECT
    ename 사원번호, job 직급, sal 급여
FROM
    emp
WHERE
    sal >= 1000 and sal <= 3000
;

/*
    NOT 연산자
    ==> 부정연산자
        조건식의 결과를 반대로 만들어 주는 연산자
        형식 ]
            WHERE
                NOT 조건식
*/

-- 사원들 중 부서번호가 10번이 아닌 사원들의
-- 사원이름, 직급, 급여, 부서번호를 조회하세요.

SELECT
    ename 사원이름, job 직급, sal 급여, deptno 부서번호
FROM
    emp
WHERE
    NOT deptno = 10
;

--------------------------------------------------------------------------------
/*
    특별한 조건 연산자(다중값 비교연산자)
        1. BETWEEN - AND
            ==> 데이터가 특정 범위 내에 있는지 확인하는 조건연산자
            
                형식 ]
                    컬럼이름(또는 연산식) BETWEEN 데이터1 AND 데이터2
                    (데이터1, 데이터2 포함)
                    
                    컬럼의 내용이 데이터1과 데이터2 사이에 있는지 검사
                    주의 ]    
                        데이터1이 데이터2보다 작아야한다.
                        
                참고 ]
                    이 연산자도 NOT 연산자와 함께 사용할 수 있다.
                    
                        NOT 컬럼이름(또는 연산식) BETWEEN 데이터1 AND 데이터2
                        컬럼이름(또는 연산식) NOT BETWEEN 데이터1 AND 데이터2
                        
        2. IN
            ==> 데이터가 주어진 데이터들 중 같은 것이 있는지를 비교하는 연산자
            
                형식 ]
                    컬럼이름(또는 연산식) IN (데이터1, 데이터2, ...)
                    
                이 연산자도 NOT 연산자와 함께 사용할 수 있다.
                
                    NOT 컬럼이름(또는 연산식) IN (데이터1, 데이터2, ...)
                    컬럼이름(또는 연산식) NOT IN (데이터1, 데이터2, ...)
                    
        3. LIKE
            ==> 문자열 비교연산자
                문자열을 처리하는 경우에만 사용하는 연산자
                문자열의 일부분을 와일드카드 처리해서 조건식을 제시하는 방법
                
                형식 ]
                    컬럼이름(또는 데이터) LIKE '와일드카드 포함 문자열'
                    ==> 데이터가 지정한 문자열(형식)과 동일한지를 비교
                    
                참고 ]
                    와일드 카드
                        _   : 한글자를 의미
                        %   : 0글자 이상을 의미
                        
                    예 ]
                        'M%'     : 'M' 으로 시작하는 모든 문자데이터('M' 한 글자 포함)
                        
                        '%S'     : 'S' 로 끝나는 모든 문자데이터
                        
                        '%A%'    : 'A' 가 포함되는 모든 문자데이터           
                        
                        'S____'  : 'S' 로 시작하는 다섯글자 문자데이터
                        
                        '__B_'   : 세번째 문자가 'B' 인 네글자 문자데이터
        
*/

-- 급여가 1000 이상 3000 이하인 사원들을 제외한 사원들의
-- 사원이름, 직급, 급여를 조회하세요

SELECT
    ename 사원이름, job 직급, sal 급여
FROM
    emp
WHERE
    NOT sal BETWEEN 1000 AND 3000
--    sal BETWEEN NOT 1000 AND 3000
    
;

-- 직급이 'SALESMAN' 이거나 'CLERK' 인 사원들의 
-- 사원이름, 직급, 부서번호를 조회하세요

SELECT
    ename 사원이름, job 직급, deptno 부서번호
FROM
    emp
WHERE
    job IN('SALESMAN', 'CLERK')
;

-- 이름이 5글자인 사원들의 사원이름, 직급, 부서번호를 조회하세요.

SELECT
    ename 사원이름, job 직급, deptno 부서번호
FROM
    emp
WHERE
    ename LIKE '_____'
;

-- 입사일이 1월인 사원들의 사원번호, 사원이름, 입사일을 조회하세요

SELECT
    empno 사원번호, ename 사원이름, hiredate 입사일
FROM
    emp
WHERE
--    hiredate LIKE '__/01/__'
    hiredate LIKE '%01/__'
;
















